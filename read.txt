aaaaaaaaaaaaaaaaaaaaaaaa


 git
--！ 创建仓库并增加到缓存区再提交道工作区
git init
git add
git commit

--！ 对比文件修改前后的不同
git diff ''
git status

--！ 版本回退
git log
git log --pretty=online
git reflog  用于找不到版本号
git reset --hard HEAD^


--！撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

--！ 删除或恢复删除的文件
1.一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了
2.情况一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
3.另一种情况是删错了，使用git checkout -- a.txt 恢复文件

--! 创建本地秘钥
 命令：ssh-keygen -t rsa -C "youremail@example.com" 就会在用户的 .ssh文件中生产id_rsa和id_rsa.pub。其中id_rsa.pub复制到github中的ssh keys中

--! 关联远程仓库
场景: 现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步
命令：git remote add origin git@serverName:path/XX.git

--! 推送本地库的内容到远程
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

--! 现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆
git clone git@github.com:serverName/XX.git

--！ 分支创建切换
git checkout -b dev ；git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
dev分支开发完成且提交到工作区后，切换回master分支。执行git merge dev来合并dev分支开发的内容。
删除分支：git branch -d dev
查看分支：git branch

--! 分支冲突
分支和主分支都修改提交了一个文件同一行内容。合并时会有冲突，需要手动修改后再次提交。
用带参数的git log也可以看到分支的合并情况： git log --graph --pretty=oneline --abbrev-commit

--！ 分支管理策略
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息
git merge --no-ff -m "merge with no-ff" dev   （因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。）
合并后，我们用git log看看分支历史
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并

--！ bug分支
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；

在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。

--！ Feature分支
开发一个新feature，最好在dev上新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

--！ 多人协作
查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。